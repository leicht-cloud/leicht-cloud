// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package plugin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileInfoProviderClient is the client API for FileInfoProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileInfoProviderClient interface {
	MinimumBytes(ctx context.Context, in *MinimumBytesQuery, opts ...grpc.CallOption) (*MinimumBytesResponse, error)
	Check(ctx context.Context, opts ...grpc.CallOption) (FileInfoProvider_CheckClient, error)
	Render(ctx context.Context, in *RenderQuery, opts ...grpc.CallOption) (*RenderResponse, error)
}

type fileInfoProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewFileInfoProviderClient(cc grpc.ClientConnInterface) FileInfoProviderClient {
	return &fileInfoProviderClient{cc}
}

func (c *fileInfoProviderClient) MinimumBytes(ctx context.Context, in *MinimumBytesQuery, opts ...grpc.CallOption) (*MinimumBytesResponse, error) {
	out := new(MinimumBytesResponse)
	err := c.cc.Invoke(ctx, "/gocloud.fileinfo.plugin.FileInfoProvider/MinimumBytes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileInfoProviderClient) Check(ctx context.Context, opts ...grpc.CallOption) (FileInfoProvider_CheckClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileInfoProvider_ServiceDesc.Streams[0], "/gocloud.fileinfo.plugin.FileInfoProvider/Check", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileInfoProviderCheckClient{stream}
	return x, nil
}

type FileInfoProvider_CheckClient interface {
	Send(*CheckQuery) error
	CloseAndRecv() (*CheckResponse, error)
	grpc.ClientStream
}

type fileInfoProviderCheckClient struct {
	grpc.ClientStream
}

func (x *fileInfoProviderCheckClient) Send(m *CheckQuery) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileInfoProviderCheckClient) CloseAndRecv() (*CheckResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CheckResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileInfoProviderClient) Render(ctx context.Context, in *RenderQuery, opts ...grpc.CallOption) (*RenderResponse, error) {
	out := new(RenderResponse)
	err := c.cc.Invoke(ctx, "/gocloud.fileinfo.plugin.FileInfoProvider/Render", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileInfoProviderServer is the server API for FileInfoProvider service.
// All implementations must embed UnimplementedFileInfoProviderServer
// for forward compatibility
type FileInfoProviderServer interface {
	MinimumBytes(context.Context, *MinimumBytesQuery) (*MinimumBytesResponse, error)
	Check(FileInfoProvider_CheckServer) error
	Render(context.Context, *RenderQuery) (*RenderResponse, error)
	mustEmbedUnimplementedFileInfoProviderServer()
}

// UnimplementedFileInfoProviderServer must be embedded to have forward compatible implementations.
type UnimplementedFileInfoProviderServer struct {
}

func (UnimplementedFileInfoProviderServer) MinimumBytes(context.Context, *MinimumBytesQuery) (*MinimumBytesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinimumBytes not implemented")
}
func (UnimplementedFileInfoProviderServer) Check(FileInfoProvider_CheckServer) error {
	return status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedFileInfoProviderServer) Render(context.Context, *RenderQuery) (*RenderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Render not implemented")
}
func (UnimplementedFileInfoProviderServer) mustEmbedUnimplementedFileInfoProviderServer() {}

// UnsafeFileInfoProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileInfoProviderServer will
// result in compilation errors.
type UnsafeFileInfoProviderServer interface {
	mustEmbedUnimplementedFileInfoProviderServer()
}

func RegisterFileInfoProviderServer(s grpc.ServiceRegistrar, srv FileInfoProviderServer) {
	s.RegisterService(&FileInfoProvider_ServiceDesc, srv)
}

func _FileInfoProvider_MinimumBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinimumBytesQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileInfoProviderServer).MinimumBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gocloud.fileinfo.plugin.FileInfoProvider/MinimumBytes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileInfoProviderServer).MinimumBytes(ctx, req.(*MinimumBytesQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileInfoProvider_Check_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileInfoProviderServer).Check(&fileInfoProviderCheckServer{stream})
}

type FileInfoProvider_CheckServer interface {
	SendAndClose(*CheckResponse) error
	Recv() (*CheckQuery, error)
	grpc.ServerStream
}

type fileInfoProviderCheckServer struct {
	grpc.ServerStream
}

func (x *fileInfoProviderCheckServer) SendAndClose(m *CheckResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileInfoProviderCheckServer) Recv() (*CheckQuery, error) {
	m := new(CheckQuery)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileInfoProvider_Render_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileInfoProviderServer).Render(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gocloud.fileinfo.plugin.FileInfoProvider/Render",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileInfoProviderServer).Render(ctx, req.(*RenderQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// FileInfoProvider_ServiceDesc is the grpc.ServiceDesc for FileInfoProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileInfoProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gocloud.fileinfo.plugin.FileInfoProvider",
	HandlerType: (*FileInfoProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MinimumBytes",
			Handler:    _FileInfoProvider_MinimumBytes_Handler,
		},
		{
			MethodName: "Render",
			Handler:    _FileInfoProvider_Render_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Check",
			Handler:       _FileInfoProvider_Check_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "fileinfo.proto",
}
