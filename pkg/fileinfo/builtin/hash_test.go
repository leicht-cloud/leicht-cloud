package builtin

import (
	"crypto/md5"
	"crypto/sha1"
	"crypto/sha256"
	"crypto/sha512"
	"hash"
	"testing"

	"github.com/schoentoon/go-cloud/pkg/fileinfo"
	"github.com/schoentoon/go-cloud/pkg/fileinfo/types"
	"golang.org/x/crypto/sha3"
)

var units = []struct {
	Name   string
	Hasher types.FileInfoProvider
	Expect []byte
}{
	{
		"MD5",
		newHashProvider("MD5", func() hash.Hash { return md5.New() }),
		[]byte{0xd7, 0xfa, 0xc5, 0xa, 0xc0, 0xbc, 0xbf, 0xbd, 0x46, 0x51, 0xef, 0xb4, 0x4e, 0x46, 0x9, 0x55},
	},
	{
		"SHA1",
		newHashProvider("SHA1", func() hash.Hash { return sha1.New() }),
		[]byte{0xfa, 0x1b, 0xd2, 0x22, 0xfa, 0x47, 0x57, 0x8, 0x5f, 0xd2, 0x10, 0xa1, 0xfe, 0x6f, 0xb6, 0x30, 0x6f, 0xa1, 0x24, 0xfd},
	},
	{
		"SHA256",
		newHashProvider("SHA256", func() hash.Hash { return sha256.New() }),
		[]byte{0x7d, 0x34, 0x68, 0xf, 0x69, 0x7c, 0xe5, 0x1a, 0xe9, 0xc3, 0xe5, 0x70, 0xce, 0x7f, 0xa5, 0x68, 0x1f, 0xf4, 0xef, 0x39, 0xdf, 0x81, 0xcf, 0x7b, 0x8, 0x4d, 0x3d, 0x85, 0xf5, 0x6f, 0x9a, 0x4e},
	},
	{
		"SHA384",
		newHashProvider("SHA384", func() hash.Hash { return sha512.New384() }),
		[]byte{0xd4, 0x27, 0xca, 0x61, 0x9f, 0x87, 0x92, 0xd7, 0x13, 0xcb, 0x8f, 0x15, 0x50, 0x3, 0x36, 0xe, 0x3a, 0x89, 0x99, 0xbe, 0x70, 0xc0, 0xcf, 0x8b, 0x72, 0x71, 0xd6, 0xf0, 0x85, 0xb6, 0x42, 0x7e, 0x76, 0x11, 0xf8, 0xa9, 0x18, 0xc5, 0x18, 0x87, 0x3e, 0x27, 0xee, 0x90, 0x6a, 0x98, 0xbe, 0x74},
	},
	{
		"SHA512",
		newHashProvider("SHA512", func() hash.Hash { return sha512.New() }),
		[]byte{0x23, 0x1d, 0xaf, 0x40, 0x2c, 0xe6, 0x51, 0x88, 0x24, 0xb7, 0x18, 0xa1, 0x81, 0xfb, 0xba, 0xe6, 0xd0, 0x13, 0xe3, 0x6d, 0xc0, 0xe9, 0x97, 0x5e, 0x66, 0xf3, 0xc4, 0x7e, 0xd, 0xac, 0x20, 0x79, 0x6d, 0x58, 0x7d, 0x8b, 0xa5, 0xed, 0x52, 0xd8, 0xf5, 0x47, 0x70, 0xcb, 0xbc, 0x6, 0x9e, 0xbb, 0x27, 0x8b, 0x51, 0x83, 0xf8, 0xe7, 0xa8, 0xb0, 0x64, 0x7f, 0x3c, 0xc4, 0x32, 0xf2, 0x3b, 0x12},
	},
	{
		"SHA3-224",
		newHashProvider("SHA3-224", func() hash.Hash { return sha3.New224() }),
		[]byte{0x17, 0xe5, 0x1e, 0xf3, 0x99, 0xaa, 0x24, 0x5b, 0x1f, 0x4, 0x6d, 0x81, 0x63, 0xb, 0x5c, 0x58, 0x96, 0xbb, 0x82, 0x8f, 0x3, 0x66, 0xd5, 0xde, 0xff, 0xef, 0x80, 0x76},
	},
	{
		"SHA3-256",
		newHashProvider("SHA3-256", func() hash.Hash { return sha3.New256() }),
		[]byte{0x5e, 0xa6, 0xa7, 0xc2, 0x9d, 0x1c, 0xf0, 0xdf, 0x1c, 0x87, 0x93, 0xf7, 0x4d, 0x52, 0x80, 0xf5, 0xb3, 0xb8, 0xa1, 0xda, 0xc3, 0x75, 0xc9, 0xfb, 0xde, 0x50, 0x22, 0x40, 0x84, 0xa, 0xea, 0x8b},
	},
	{
		"SHA3-384",
		newHashProvider("SHA3-384", func() hash.Hash { return sha3.New384() }),
		[]byte{0x6, 0xe4, 0x1f, 0xa4, 0x5d, 0x63, 0x9e, 0xaa, 0x1a, 0xeb, 0x2d, 0x49, 0x1e, 0xb0, 0xd7, 0x8a, 0x75, 0x36, 0x6b, 0xe3, 0xde, 0x97, 0x12, 0xcc, 0xc, 0xd6, 0x6d, 0x1, 0x35, 0x10, 0xbd, 0xe9, 0xa0, 0x48, 0x3e, 0x58, 0x1, 0xe4, 0x58, 0x4d, 0xc2, 0x7c, 0xad, 0x5f, 0x9e, 0x7c, 0xa1, 0xbc},
	},
	{
		"SHA3-512",
		newHashProvider("SHA3-512", func() hash.Hash { return sha3.New512() }),
		[]byte{0x11, 0x34, 0xb4, 0x81, 0xae, 0xc7, 0x8b, 0xa8, 0x3e, 0x8e, 0x91, 0x72, 0x3a, 0x5f, 0xdd, 0x63, 0xbd, 0xf8, 0xde, 0x59, 0x8b, 0xf9, 0x9c, 0xf9, 0x6a, 0x4c, 0xe2, 0x2d, 0x35, 0x3b, 0x6, 0x17, 0x11, 0xd6, 0x1b, 0x92, 0x14, 0x3d, 0x75, 0xe1, 0xee, 0x3c, 0x2f, 0x88, 0x75, 0x6c, 0x42, 0xbe, 0xa4, 0xcd, 0x4d, 0x1, 0x91, 0xd3, 0xe0, 0xe4, 0x19, 0xd5, 0x5d, 0x3a, 0xd0, 0x2c, 0xff, 0x38},
	},
}

func TestFileInfoHash(t *testing.T) {
	for _, u := range units {
		t.Run(u.Name, func(t *testing.T) {
			fileinfo.RunFileInfoProviderFromFile(u.Hasher, "testdata/sample.jpg", t, u.Expect)
		})
	}
}

func BenchmarkFileInfoHash(b *testing.B) {
	for _, u := range units {
		b.Run(u.Name, func(b *testing.B) {
			fileinfo.RunFileInfoProviderFromFile(u.Hasher, "testdata/sample.jpg", b, u.Expect)
		})
	}
}
