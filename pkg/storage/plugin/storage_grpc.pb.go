// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: storage.proto

package plugin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StorageProviderClient is the client API for StorageProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageProviderClient interface {
	Configure(ctx context.Context, in *ConfigData, opts ...grpc.CallOption) (*Error, error)
	InitUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Error, error)
	MkDir(ctx context.Context, in *MkdirQuery, opts ...grpc.CallOption) (*Error, error)
	Move(ctx context.Context, in *MoveQuery, opts ...grpc.CallOption) (*Error, error)
	ListDirectory(ctx context.Context, in *ListDirectoryQuery, opts ...grpc.CallOption) (StorageProvider_ListDirectoryClient, error)
	OpenFile(ctx context.Context, in *OpenFileQuery, opts ...grpc.CallOption) (*OpenFileReply, error)
	CloseFile(ctx context.Context, in *CloseFileQuery, opts ...grpc.CallOption) (*Error, error)
	WriteFile(ctx context.Context, in *WriteFileQuery, opts ...grpc.CallOption) (*WriteFileReply, error)
	ReadFile(ctx context.Context, in *ReadFileQuery, opts ...grpc.CallOption) (StorageProvider_ReadFileClient, error)
	Delete(ctx context.Context, in *DeleteQuery, opts ...grpc.CallOption) (*Error, error)
}

type storageProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageProviderClient(cc grpc.ClientConnInterface) StorageProviderClient {
	return &storageProviderClient{cc}
}

func (c *storageProviderClient) Configure(ctx context.Context, in *ConfigData, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/leichtcloud.storage.plugin.StorageProvider/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageProviderClient) InitUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/leichtcloud.storage.plugin.StorageProvider/InitUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageProviderClient) MkDir(ctx context.Context, in *MkdirQuery, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/leichtcloud.storage.plugin.StorageProvider/MkDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageProviderClient) Move(ctx context.Context, in *MoveQuery, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/leichtcloud.storage.plugin.StorageProvider/Move", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageProviderClient) ListDirectory(ctx context.Context, in *ListDirectoryQuery, opts ...grpc.CallOption) (StorageProvider_ListDirectoryClient, error) {
	stream, err := c.cc.NewStream(ctx, &StorageProvider_ServiceDesc.Streams[0], "/leichtcloud.storage.plugin.StorageProvider/ListDirectory", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageProviderListDirectoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StorageProvider_ListDirectoryClient interface {
	Recv() (*FileInfo, error)
	grpc.ClientStream
}

type storageProviderListDirectoryClient struct {
	grpc.ClientStream
}

func (x *storageProviderListDirectoryClient) Recv() (*FileInfo, error) {
	m := new(FileInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageProviderClient) OpenFile(ctx context.Context, in *OpenFileQuery, opts ...grpc.CallOption) (*OpenFileReply, error) {
	out := new(OpenFileReply)
	err := c.cc.Invoke(ctx, "/leichtcloud.storage.plugin.StorageProvider/OpenFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageProviderClient) CloseFile(ctx context.Context, in *CloseFileQuery, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/leichtcloud.storage.plugin.StorageProvider/CloseFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageProviderClient) WriteFile(ctx context.Context, in *WriteFileQuery, opts ...grpc.CallOption) (*WriteFileReply, error) {
	out := new(WriteFileReply)
	err := c.cc.Invoke(ctx, "/leichtcloud.storage.plugin.StorageProvider/WriteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageProviderClient) ReadFile(ctx context.Context, in *ReadFileQuery, opts ...grpc.CallOption) (StorageProvider_ReadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &StorageProvider_ServiceDesc.Streams[1], "/leichtcloud.storage.plugin.StorageProvider/ReadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageProviderReadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StorageProvider_ReadFileClient interface {
	Recv() (*ReadFileReply, error)
	grpc.ClientStream
}

type storageProviderReadFileClient struct {
	grpc.ClientStream
}

func (x *storageProviderReadFileClient) Recv() (*ReadFileReply, error) {
	m := new(ReadFileReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageProviderClient) Delete(ctx context.Context, in *DeleteQuery, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/leichtcloud.storage.plugin.StorageProvider/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageProviderServer is the server API for StorageProvider service.
// All implementations must embed UnimplementedStorageProviderServer
// for forward compatibility
type StorageProviderServer interface {
	Configure(context.Context, *ConfigData) (*Error, error)
	InitUser(context.Context, *User) (*Error, error)
	MkDir(context.Context, *MkdirQuery) (*Error, error)
	Move(context.Context, *MoveQuery) (*Error, error)
	ListDirectory(*ListDirectoryQuery, StorageProvider_ListDirectoryServer) error
	OpenFile(context.Context, *OpenFileQuery) (*OpenFileReply, error)
	CloseFile(context.Context, *CloseFileQuery) (*Error, error)
	WriteFile(context.Context, *WriteFileQuery) (*WriteFileReply, error)
	ReadFile(*ReadFileQuery, StorageProvider_ReadFileServer) error
	Delete(context.Context, *DeleteQuery) (*Error, error)
	mustEmbedUnimplementedStorageProviderServer()
}

// UnimplementedStorageProviderServer must be embedded to have forward compatible implementations.
type UnimplementedStorageProviderServer struct {
}

func (UnimplementedStorageProviderServer) Configure(context.Context, *ConfigData) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (UnimplementedStorageProviderServer) InitUser(context.Context, *User) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitUser not implemented")
}
func (UnimplementedStorageProviderServer) MkDir(context.Context, *MkdirQuery) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MkDir not implemented")
}
func (UnimplementedStorageProviderServer) Move(context.Context, *MoveQuery) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Move not implemented")
}
func (UnimplementedStorageProviderServer) ListDirectory(*ListDirectoryQuery, StorageProvider_ListDirectoryServer) error {
	return status.Errorf(codes.Unimplemented, "method ListDirectory not implemented")
}
func (UnimplementedStorageProviderServer) OpenFile(context.Context, *OpenFileQuery) (*OpenFileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenFile not implemented")
}
func (UnimplementedStorageProviderServer) CloseFile(context.Context, *CloseFileQuery) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseFile not implemented")
}
func (UnimplementedStorageProviderServer) WriteFile(context.Context, *WriteFileQuery) (*WriteFileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteFile not implemented")
}
func (UnimplementedStorageProviderServer) ReadFile(*ReadFileQuery, StorageProvider_ReadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadFile not implemented")
}
func (UnimplementedStorageProviderServer) Delete(context.Context, *DeleteQuery) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedStorageProviderServer) mustEmbedUnimplementedStorageProviderServer() {}

// UnsafeStorageProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageProviderServer will
// result in compilation errors.
type UnsafeStorageProviderServer interface {
	mustEmbedUnimplementedStorageProviderServer()
}

func RegisterStorageProviderServer(s grpc.ServiceRegistrar, srv StorageProviderServer) {
	s.RegisterService(&StorageProvider_ServiceDesc, srv)
}

func _StorageProvider_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageProviderServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leichtcloud.storage.plugin.StorageProvider/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageProviderServer).Configure(ctx, req.(*ConfigData))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageProvider_InitUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageProviderServer).InitUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leichtcloud.storage.plugin.StorageProvider/InitUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageProviderServer).InitUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageProvider_MkDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MkdirQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageProviderServer).MkDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leichtcloud.storage.plugin.StorageProvider/MkDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageProviderServer).MkDir(ctx, req.(*MkdirQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageProvider_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageProviderServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leichtcloud.storage.plugin.StorageProvider/Move",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageProviderServer).Move(ctx, req.(*MoveQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageProvider_ListDirectory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListDirectoryQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageProviderServer).ListDirectory(m, &storageProviderListDirectoryServer{stream})
}

type StorageProvider_ListDirectoryServer interface {
	Send(*FileInfo) error
	grpc.ServerStream
}

type storageProviderListDirectoryServer struct {
	grpc.ServerStream
}

func (x *storageProviderListDirectoryServer) Send(m *FileInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _StorageProvider_OpenFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenFileQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageProviderServer).OpenFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leichtcloud.storage.plugin.StorageProvider/OpenFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageProviderServer).OpenFile(ctx, req.(*OpenFileQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageProvider_CloseFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseFileQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageProviderServer).CloseFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leichtcloud.storage.plugin.StorageProvider/CloseFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageProviderServer).CloseFile(ctx, req.(*CloseFileQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageProvider_WriteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteFileQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageProviderServer).WriteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leichtcloud.storage.plugin.StorageProvider/WriteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageProviderServer).WriteFile(ctx, req.(*WriteFileQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageProvider_ReadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadFileQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageProviderServer).ReadFile(m, &storageProviderReadFileServer{stream})
}

type StorageProvider_ReadFileServer interface {
	Send(*ReadFileReply) error
	grpc.ServerStream
}

type storageProviderReadFileServer struct {
	grpc.ServerStream
}

func (x *storageProviderReadFileServer) Send(m *ReadFileReply) error {
	return x.ServerStream.SendMsg(m)
}

func _StorageProvider_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageProviderServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leichtcloud.storage.plugin.StorageProvider/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageProviderServer).Delete(ctx, req.(*DeleteQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageProvider_ServiceDesc is the grpc.ServiceDesc for StorageProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "leichtcloud.storage.plugin.StorageProvider",
	HandlerType: (*StorageProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Configure",
			Handler:    _StorageProvider_Configure_Handler,
		},
		{
			MethodName: "InitUser",
			Handler:    _StorageProvider_InitUser_Handler,
		},
		{
			MethodName: "MkDir",
			Handler:    _StorageProvider_MkDir_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _StorageProvider_Move_Handler,
		},
		{
			MethodName: "OpenFile",
			Handler:    _StorageProvider_OpenFile_Handler,
		},
		{
			MethodName: "CloseFile",
			Handler:    _StorageProvider_CloseFile_Handler,
		},
		{
			MethodName: "WriteFile",
			Handler:    _StorageProvider_WriteFile_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _StorageProvider_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListDirectory",
			Handler:       _StorageProvider_ListDirectory_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadFile",
			Handler:       _StorageProvider_ReadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "storage.proto",
}
